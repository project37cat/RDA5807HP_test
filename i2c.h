// hardware i2c
// HI-TECH C Compiler
// 21-Dec-2014
//
// source: http://picdevices.ru/eksperimentyi/i2c-izmerenie-temperaturyi-termodatchik-ds1621.html



#define I2C_FREQ 100000  //частота шины 100кГц
#define GEN_FREQ (((_XTAL_FREQ / I2C_FREQ) / 4) - 1) // расчет коэф генератора(BAUD RATE GENERATOR)

#define I2C_SCL RC3
#define I2C_SDA RC4
#define I2C_SCL_TRIS TRISC3
#define I2C_SDA_TRIS TRISC4
 
#define ACK  1
#define NACK 0


///////////////////////////////////////////////////////////////////////////////////////////////////
void _i2c_init(void) //инициализация I2C модуля
{
//I2C_SCL = 1;
//I2C_SDA = 1;
I2C_SCL_TRIS = 1;
I2C_SDA_TRIS = 1;

SSPSTAT = 0b11000000;
SSPCON2 = 0b00000000;
SSPADD  = GEN_FREQ;
SSPCON1  = 0b00101000;

SSPIF = 0; //прерывания от модуля MSSP (PIR1.3)
SSPIE = 0; //прерывания от модуля MSSP (PIE1.3)
BCLIF = 0; //коллизии на шине (PIR2.3)
BCLIE = 0; //коллизии на шине (PIE2.3)
}


///////////////////////////////////////////////////////////////////////////////////////////////////
void _i2c_checkidle(void) //проверка освобождения шины
{
while (RW);
while (SSPCON2 & 0x1F);
}


///////////////////////////////////////////////////////////////////////////////////////////////////
void _i2c_start(void) //СТАРТ последовательность
{
_i2c_checkidle();  // проверка освобождения шины
SEN = 1;           // сформировать СТАРТ
while (!SSPIF);    // проверка окончания СТАРТ
SSPIF = 0;         // сбросить флаг
}


///////////////////////////////////////////////////////////////////////////////////////////////////
void _i2c_restart(void) // повторный СТАРТ
{
_i2c_checkidle();  // проверка освобождения шины
RSEN = 1;          // сформировать П.СТАРТ
while (!SSPIF);    // проверка окончания П.СТАРТ
SSPIF = 0;         // сбросить флаг
}
 

///////////////////////////////////////////////////////////////////////////////////////////////////
void _i2c_stop(void) //СТОП последовательность
{
_i2c_checkidle();  // проверка освобождения шины
PEN = 1;           // сформировать СТОП
while (!SSPIF);    // проверка окончания СТОП
SSPIF = 0;         // сбросить флаг
}


///////////////////////////////////////////////////////////////////////////////////////////////////
void _i2c_sendbyte(unsigned char d) //ПОСЛАТЬ байт
{
_i2c_checkidle();  // проверка освобождения шины
SSPBUF = d;        // послать данные
 
SSPIF = 0;         // сбросить флаг
while (!SSPIF);    // проверка окончания передачи
SSPIF = 0;         // сбросить флаг
 
while (ACKSTAT);   // проверка подтверждения приема
}


///////////////////////////////////////////////////////////////////////////////////////////////////
unsigned char _i2c_readbyte(unsigned char ack) //ПРОЧИТАТЬ байт - Формирование подтверждения ACK/NACK
{
unsigned char i2cReadData;
 
_i2c_checkidle();  //проверка освобождения шины
RCEN = 1;          //разрешить прием данных
 
SSPIF = 0;         //сбросить флаг
while (!SSPIF);    //проверка окончания передачи
SSPIF = 0;         //сбросить флаг
 
_i2c_checkidle();     //проверка освобождения шины
i2cReadData = SSPBUF; //считать буфер

// Формирование подтверждения ACK/NACK
_i2c_checkidle();//проверка освобождения шины
if(ack) ACKDT = 0;  // ACK
else ACKDT = 1;     // NACK

ACKEN = 1;    //отправить подтверждение приема
 
SSPIF = 0;         //сбросить флаг
while (!SSPIF);    //проверка окончания передачи
SSPIF = 0;         //сбросить флаг
 
return(i2cReadData);
}
